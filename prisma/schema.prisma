generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// models
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?

  issues         Issue[]   @relation("IssueAuthor")
  assignedIssues Issue[]   @relation("IssueAssignee")
  comments       Comment[]
  accounts       Account[]
  sessions       Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Issue {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String?       @db.Text
  status      IssueStatus   @default(OPEN)
  priority    IssuePriority @default(MEDIUM)

  authorId Int
  author   User @relation("IssueAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  assigneeId Int?
  assignee   User? @relation("IssueAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("issues")
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String @db.Text

  issueId Int
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([issueId])
  @@index([authorId])
  @@map("comments")
}

// Enums
enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
